name: Python package

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"] # Consider if you need to build for all these or just one for publishing
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8 # Or your desired build Python version
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build # Using pypa/build
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Build package
        run: |
          python -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-github-packages:
    name: Publish Python distribution to GitHub Packages
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed for trusted publishing
      contents: read # Needed to checkout the repository
      packages: write # Needed to publish packages
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to GitHub Packages
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://pypi.pkg.github.com/${{ github.repository_owner }}
          # No need for username/password, GITHUB_TOKEN is used by default by the action
          # when publishing to GitHub Packages if permissions are set correctly.
          # The action handles OIDC for PyPI.org, but for GH Packages, it uses GITHUB_TOKEN.
          # We are providing TWINE_USERNAME and GITHUB_TOKEN (as TWINE_PASSWORD)
          # explicitly here for GitHub Packages as per common practice, though
          # the action might infer it.
          # For GitHub Packages, ensure GITHUB_TOKEN (or your custom RELEASE_GITHUB_TOKEN)
          # has 'packages: write' permission.
          # The environment variables TWINE_USERNAME and TWINE_PASSWORD are set below
          # to ensure twine uses them for GitHub Packages.
          # The pypa/gh-action-pypi-publish action documentation mentions that
          # for non-PyPI/TestPyPI repositories, it falls back to standard Twine behavior.
          # So, we need to provide credentials.
          # username: __token__ # This is usually for PyPI.org
          # password: ${{ secrets.GITHUB_TOKEN }} # Using the built-in GITHUB_TOKEN
          # Let's stick to the more explicit TWINE_USERNAME and TWINE_PASSWORD for non-PyPI repos
          # as per general twine usage for custom repositories.
          # The action's documentation is a bit nuanced for GitHub Packages.
          # It primarily focuses on PyPI/TestPyPI with OIDC.
          # For other repos, it uses Twine's standard mechanisms.
          # Thus, setting TWINE_USERNAME and TWINE_PASSWORD via env vars is the most robust.
          # Ensure your RELEASE_GITHUB_TOKEN has `packages: write` scope.
          # No, for pypa/gh-action-pypi-publish, when publishing to GH Packages (or other non-PyPI.org repos),
          # it's best to rely on Twine's environment variable configuration if the action itself
          # doesn't directly take username/password for arbitrary repos.
          # The action primarily facilitates OIDC with PyPI.
          # Let's set the environment variables for Twine directly.
          # The action will pick them up.

          # Correction: The pypa/gh-action-pypi-publish action, when used with a non-PyPI repository_url,
          # expects TWINE_USERNAME and TWINE_PASSWORD to be in the environment.
          # The `permissions: id-token: write` is for OIDC with PyPI.org.
          # For GitHub Packages, we need `permissions: packages: write` for the GITHUB_TOKEN.
env: # Setting these at the job level for the pypa action to pick up
  TWINE_USERNAME: __token__
  TWINE_PASSWORD: ${{ secrets.RELEASE_GITHUB_TOKEN }} # Use your custom token if it has package:write
  # TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }} # Or use the default GITHUB_TOKEN if it has package:write and contents:read
    # The original had secrets.RELEASE_GITHUB_TOKEN. Sticking to that.

# Old publish step:
#      - name: Publish package
#        env:
#          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }} # This was used to set TWINE_PASSWORD
#          TWINE_USERNAME: __token__
#          TWINE_PASSWORD: ${{ secrets.RELEASE_GITHUB_TOKEN }}
#        run: |
#          pip install twine
#          python -m twine upload --repository-url https://api.github.com/orgs/${{ github.repository_owner }}/packages/pypi/upload dist/* --non-interactive
